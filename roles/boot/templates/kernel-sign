#!/bin/sh

KERNEL=${KERNEL:-linux}
UCODE=/boot/intel-ucode.img
INITRAMFS="/boot/initramfs-$KERNEL.img"
VMLINUZ="/boot/vmlinuz-$KERNEL"
CMDLINE="/boot/cmdline.txt"

SB_FOLDER={{ sb_folder }}
KEY="$SB_FOLDER/db.key"
CERT="$SB_FOLDER/db.crt"

BUILD_DIR=$(shell mktemp -d /tmp/secure-boot.XXXXXX)
BUILD_INITRAMFS=$BUILD_DIR/initramfs.img
BUILD_LINUX_COMBINED=$BUILD_DIR/linux-combined.efi
BUILD_LINUX_COMBINED_SIGNED=$BUILD_DIR/linux-combined-signed.efi

OUTPUT_FOLDER=/boot/EFI/Linux
OUTPUT="$OUTPUT_FOLDER/$KERNEL.efi"

echo "Building in $BUILDDIR"

ucode_file=""
if [ -f "$UCODE" ]; then
    echo "Found intel-ucode at $UCODE"
    ucode_file="$UCODE"
fi

if [ ! -f "$INITRAMFS" ]; then
    echo "Not found any initramfs for $KERNEL at $INITRAMFS"
    exit 1
fi

if [ ! -f "$VMLINUZ" ]; then
    echo "Not found any vmlinuz for $KERNEL at $VMLINUZ"
    exit 1
fi

if [ ! -f "$CMDLINE" ]; then
    echo "Not found any cmdline for $KERNEL at $CMDLINE"
    exit 1
fi

if [ ! -f "$KEY" ]; then
    echo "Not found any key at $KEY"
    exit 1
fi

if [ ! -f "$KEY" ]; then
    echo "Not found any key at $CERT"
    exit 1
fi

cat $ucode_file "$INITRAMFS" > $BUILD_INITRAMFS

objcopy \
    --add-section .osrel=/etc/os-release --change-section-vma .osrel=0x20000 \
    --add-section .cmdline="$CMDLINE" --change-section-vma .cmdline=0x30000 \
    --add-section .linux="$VMLINUZ" --change-section-vma .linux=0x40000 \
    --add-section .initrd="$BUILD_INITRAMFS" --change-section-vma .initrd=0x3000000 \
    $BUILD_LINUX_COMBINED

sbsign \
    --key "$KEY" --cert "$CERT" \
    --output "$BUILD_LINUX_COMBINED_SIGNED" \
    "$BUILD_LINUX_COMBINED"

mkdir -p $OUTPUT_FOLDER
cp "$BUILD_LINUX_COMBINED_SIGNED" $OUTPUT
